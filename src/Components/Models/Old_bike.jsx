/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 old_bike.glb s --transform
Author: ThÃ©o A (https://sketchfab.com/lazygraph)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/old-bike-8e6d1067635f4c4084c9a48cb0bc228f
Title: Old Bike
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import useStore from "../../Utils/store";
import { useControls } from "leva";
import * as THREE from "three";

import { TextureLoader } from "three";

export function Model(props) {
  const { nodes, materials } = useGLTF('/Models/old_bike-transformed.glb')
  const color = useStore((state) => state.colors["frame"]);
  const surface = useStore((state) => state.surface["frame"]);
  const [textures, setTextures] = useState([]);

  useEffect(() => {
    const loadTextures = async () => {
      const texturePaths = [
        `/Surfaces/${surface}/Albedo.png`,
        `/Surfaces/${surface}/AO.png`,
        `/Surfaces/${surface}/Metalness.png`,
        `/Surfaces/${surface}/Roughness.png`,
        `/Surfaces/${surface}/Normal.png`,
        `/Surfaces/${surface}/Height.png`,
      ];

      const textureLoader = new TextureLoader();

      const loadedTextures = await Promise.all(
        texturePaths.map((path) =>
          textureLoader.loadAsync(path).catch(() => {})
        )
      );

      setTextures(loadedTextures);
    };

    if (surface) loadTextures();
  }, [surface]);

  useEffect(() => {
    nodes.Base_Base_0.geometry.center();
  }, []);
  return (
    <group scale={0.015} position={[0,-1.5,0]} {...props} dispose={null}>
      <mesh geometry={nodes.Base_Base_0.geometry} position={[-75.574, 66.109, -15.687]} rotation={[-Math.PI / 2, 0, 0]} scale={100} >
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      {/* <mesh geometry={nodes.Handlebar_Handle_0.geometry} material={materials.Handle} position={[67.882, 211.949, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      <mesh geometry={nodes.Saddle_Saddle_0.geometry} material={materials.Saddle} position={[-73.185, 225.957, 0]} rotation={[-Math.PI / 2, -0.1, 0]} scale={48.158} />
      <mesh geometry={nodes.Wheels_Wheels_0.geometry} material={materials.Wheels} position={[-127.644, 80.258, -0.01]} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      <mesh geometry={nodes.Brake_Joint_Brake_0.geometry} material={materials.Joint_Brake} position={[-92.666, 137.61, -9.347]} rotation={[-Math.PI / 2, -0.949, -1.568]} scale={[1.364, 1.364, 2.388]} />
      <mesh geometry={nodes.Pedals_Details_0.geometry} material={materials.Details} position={[44.886, 87.245, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      <mesh geometry={nodes.Chains_Chains_0.geometry} material={materials.Chains} position={[-82.549, 153.874, -2.331]} rotation={[-Math.PI / 2, 0, 0]} scale={100} /> */}
    </group>
  )
}

useGLTF.preload('/old_bike-transformed.glb')
