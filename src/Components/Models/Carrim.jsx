/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 carrim.glb s --transform
Author: LynxCG (https://sketchfab.com/doggydog12)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/work-vs-xx-car-rim-cd28ccf9dc7f4241806ec33525e3cf7e
Title: Work VS-XX car rim
*/
import React, { useRef, useState, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import useStore from "../../Utils/store";
import { useControls } from "leva";
import * as THREE from "three";
import { TextureLoader } from "three";

export function Model(props) {
  const { nodes, materials } = useGLTF('/Models/carrim-transformed.glb')
  const color = useStore((state) => state.colors["rim"]);
  const surface = useStore((state) => state.surface["rim"]);
  const [textures, setTextures] = useState([]);

  useEffect(() => {
    const loadTextures = async () => {
      const texturePaths = [
        `/Surfaces/${surface}/Albedo.png`,
        `/Surfaces/${surface}/AO.png`,
        `/Surfaces/${surface}/Metalness.png`,
        `/Surfaces/${surface}/Roughness.png`,
        `/Surfaces/${surface}/Normal.png`,
        `/Surfaces/${surface}/Height.png`,
      ];

      const textureLoader = new TextureLoader();

      const loadedTextures = await Promise.all(
        texturePaths.map((path) =>
          textureLoader.loadAsync(path).catch(() => {})
        )
      );

      setTextures(loadedTextures);
    };

    if (surface) loadTextures();
  }, [surface]);

  console.log(surface);

  return (
    <group scale={4} {...props} dispose={null} rotation={[0, -0.8, 0]}>
      <mesh castShadow geometry={nodes.Object_4.geometry} material={materials.paint} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]}>
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_6.geometry} material={materials.chrome} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]}>
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_7.geometry} material={materials.material} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]}>
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_8.geometry} material={materials.metal} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]}>
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_9.geometry} material={materials.bolts} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]} >
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_10.geometry} material={materials.logo_vs} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]} >
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_11.geometry} material={materials.lugs_black} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]} >
      <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
      <mesh castShadow geometry={nodes.Object_12.geometry} material={materials.lugs_bronze} position={[0, 0, -0.046]} rotation={[Math.PI / 2, 0, 0]} >
           <meshPhysicalMaterial
          attach='material'
          color={color}
          map={textures.length > 0 ? textures[0] : null}
          // aoMap={textures.length > 0 ? textures[1] : null}
          // metalnessMap={textures.length > 0 ? textures[2] : null}
          // metalness={1}
          // roughnessMap={textures.length > 0 ? textures[3] : null}
          // roughness={0.5}
          // normalMap={textures.length > 0 ? textures[4] : null}
          // normalScale={new THREE.Vector2(1, 1)}
          // displacementMap={textures.length > 0 ? textures[5] : null}
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('/carrim-transformed.glb')
